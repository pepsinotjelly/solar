import math
import random

import engin.similarity_calculator as es
import numpy as np


# from engin.userCF import UserSimilarity
#
# List1 = np.array([[5, 2, 2, 6, 4, 8, 5, 4, 4, 3, 0, 8, 6, 3, 8, 2, 0, 1, 7, 7],
#                   [2, 7, 0, 6, 5, 8, 0, 7, 9, 4, 8, 1, 7, 7, 6, 1, 7, 7, 8, 1],
#                   [5, 2, 8, 0, 6, 8, 2, 1, 8, 0, 0, 1, 5, 9, 2, 3, 2, 6, 4, 0],
#                   [6, 8, 0, 6, 8, 8, 8, 9, 6, 7, 0, 4, 1, 6, 7, 0, 7, 0, 2, 0],
#                   [0, 0, 8, 5, 9, 2, 0, 2, 9, 8, 0, 8, 6, 0, 0, 1, 4, 5, 6, 4],
#                   [4, 9, 8, 2, 1, 0, 7, 4, 3, 7, 2, 5, 2, 8, 4, 0, 9, 3, 2, 7],
#                   [4, 6, 6, 3, 4, 6, 0, 7, 7, 3, 8, 3, 1, 5, 3, 7, 1, 7, 5, 7],
#                   [0, 4, 1, 0, 9, 6, 8, 2, 6, 7, 9, 5, 9, 2, 3, 5, 1, 9, 6, 0],
#                   [8, 1, 2, 7, 0, 1, 3, 4, 8, 4, 3, 3, 3, 2, 9, 8, 8, 6, 2, 6],
#                   [8, 9, 8, 2, 1, 7, 9, 1, 5, 7, 2, 3, 8, 2, 7, 3, 8, 7, 0, 0]])
#
# List2 = np.array([3, 0, 0, 0, 7, 5, 0, 0, 0, 16, 0, 0, 2, 0, 0, 9, 9, 8, 5, 6])
# calculator = es.SimilarityCalculator()
# print(calculator.get_recommend_list(List1, List2))


# print(UserSimilarity(List1))

def demo_test():
    user_list = [[7, 5, 2, 0, 0, 1, 5, 2, 2, 0, 6, 5, 3, 4, 3, 7, 2, 4, 7, 6],
                 [9, 3, 1, 5, 1, 8, 6, 6, 2, 6, 7, 9, 0, 9, 4, 0, 0, 8, 4, 7],
                 [5, 1, 3, 2, 8, 4, 8, 3, 6, 1, 8, 9, 1, 6, 6, 5, 0, 1, 6, 5],
                 [1, 2, 6, 9, 8, 0, 3, 1, 1, 5, 2, 1, 3, 0, 3, 2, 2, 9, 1, 7],
                 [8, 5, 0, 5, 3, 0, 3, 5, 5, 9, 4, 7, 5, 9, 6, 9, 5, 7, 4, 6],
                 [2, 8, 6, 0, 6, 2, 0, 9, 3, 8, 3, 8, 5, 6, 9, 1, 4, 1, 4, 4],
                 [1, 7, 1, 5, 1, 5, 3, 9, 2, 2, 1, 4, 1, 4, 0, 2, 6, 1, 0, 8],
                 [4, 7, 2, 7, 8, 5, 6, 7, 8, 8, 3, 9, 3, 7, 1, 9, 5, 8, 8, 8],
                 [7, 3, 5, 5, 3, 9, 0, 5, 8, 0, 9, 9, 8, 0, 0, 7, 9, 2, 3, 4],
                 [4, 0, 4, 2, 7, 3, 8, 7, 8, 6, 9, 5, 1, 4, 7, 8, 5, 6, 0, 6]]
    d0_list = [[3, 9, 9, 4, 2, 2, 1, 4, 0, 4, 1, 5, 6, 1, 8, 6, 9, 0, 2, 8],
               [3, 3, 8, 6, 0, 5, 6, 6, 9, 5, 4, 4, 7, 9, 9, 8, 5, 5, 9, 7],
               [9, 5, 3, 3, 1, 3, 9, 9, 3, 5, 3, 8, 8, 6, 7, 1, 3, 6, 1, 8],
               [6, 2, 3, 8, 1, 1, 2, 0, 9, 5, 4, 7, 6, 9, 8, 5, 3, 9, 3, 8],
               [7, 5, 9, 0, 2, 0, 0, 1, 3, 1, 1, 3, 2, 9, 7, 8, 0, 6, 4, 8],
               [3, 3, 2, 8, 5, 3, 1, 3, 4, 9, 8, 5, 7, 7, 2, 6, 3, 4, 9, 7],
               [8, 0, 3, 2, 2, 5, 8, 0, 0, 1, 1, 6, 2, 3, 9, 7, 1, 4, 1, 3],
               [3, 4, 4, 4, 6, 5, 9, 5, 8, 7, 8, 2, 2, 2, 3, 6, 7, 9, 1, 2],
               [8, 7, 4, 9, 7, 4, 9, 1, 9, 3, 9, 8, 5, 3, 8, 7, 1, 1, 9, 7],
               [1, 9, 9, 1, 0, 9, 3, 9, 1, 1, 3, 8, 6, 2, 3, 3, 8, 7, 7, 3]]


def creat(N, M):
    res = []
    for i in range(N):
        path = []
        for j in range(M):
            path.append(random.randint(0, 9))
        res.append(path)
    print(res)


def get_mul(user_A, user_B, clo=10, row=20):
    plus_A = []
    for i in range(clo):
        line = []
        for j in range(row):
            line.append(user_A[i][j] * user_B[i][j])
        plus_A.append(line)
    res = []
    for i in range(clo):
        line_plus = 0
        for j in range(row):
            line_plus = line_plus + plus_A[i][j]
        res.append(line_plus)
    print(res)
    return res


def get_plus(plus_A, clo=10):
    line_plus = 0
    for i in range(clo):
        line_plus = line_plus + plus_A[i]
    print(line_plus)
    return line_plus


def get_result(user_A, user_B, clo=10):
    plus_A = []
    for i in range(clo):
        plus_A.append(user_A[i] * user_B[i])
    line_plus = 0
    get_plus(plus_A, clo=10)


def get_sqrt(user_A, N=10):
    res = []
    for i in range(N):
        res.append(math.sqrt(user_A[i]))
    print(res)
    return res


def have_a_test():
    user_A = [[2, 2, 4, 7, 6, 8, 9, 8, 9, 9, 5, 8, 5, 7, 1, 3, 5, 6, 2, 0],
              [0, 6, 2, 0, 2, 9, 0, 1, 0, 7, 4, 4, 5, 3, 5, 4, 3, 6, 9, 3],
              [6, 1, 0, 1, 8, 2, 1, 4, 7, 8, 9, 3, 8, 8, 2, 5, 1, 0, 4, 5],
              [1, 0, 7, 7, 3, 5, 6, 8, 9, 9, 4, 8, 4, 0, 7, 4, 0, 7, 8, 7],
              [1, 1, 0, 0, 4, 9, 3, 4, 5, 7, 4, 0, 0, 9, 1, 3, 2, 8, 5, 8],
              [6, 5, 1, 0, 8, 0, 0, 7, 3, 7, 2, 3, 3, 2, 7, 3, 1, 9, 9, 6],
              [3, 8, 4, 3, 4, 3, 2, 1, 8, 6, 2, 0, 7, 8, 6, 0, 5, 5, 3, 1],
              [1, 0, 6, 3, 3, 5, 3, 1, 0, 7, 4, 7, 0, 0, 7, 9, 8, 7, 3, 5],
              [3, 4, 4, 1, 0, 8, 9, 3, 7, 7, 9, 9, 3, 9, 2, 3, 6, 8, 8, 4],
              [5, 5, 2, 3, 9, 9, 1, 7, 1, 4, 4, 4, 3, 2, 2, 5, 3, 6, 3, 1]]
    test_matrix = [[2, 5, 4, 3, 1, 0, 7, 1, 2, 8, 1, 1, 7, 7, 7, 9, 6, 9, 0, 6],
                   [6, 4, 1, 2, 8, 7, 3, 2, 1, 2, 9, 8, 4, 9, 7, 9, 3, 5, 6, 0],
                   [3, 2, 4, 8, 6, 2, 5, 4, 2, 4, 8, 7, 1, 0, 0, 5, 6, 4, 0, 0],
                   [4, 5, 2, 0, 7, 8, 8, 0, 5, 5, 5, 5, 3, 5, 8, 7, 4, 6, 8, 8],
                   [7, 5, 4, 6, 9, 9, 2, 8, 6, 4, 2, 9, 2, 1, 6, 5, 9, 2, 5, 5],
                   [7, 6, 4, 7, 1, 0, 4, 0, 7, 3, 1, 1, 6, 7, 0, 1, 4, 2, 4, 5],
                   [6, 9, 9, 9, 8, 0, 4, 2, 2, 6, 7, 8, 7, 6, 5, 1, 8, 6, 5, 9],
                   [5, 1, 3, 6, 5, 8, 2, 4, 7, 3, 1, 1, 6, 7, 5, 1, 4, 6, 5, 2],
                   [8, 3, 2, 3, 0, 9, 9, 9, 7, 5, 1, 6, 9, 5, 1, 0, 9, 5, 7, 9],
                   [6, 4, 0, 9, 3, 9, 1, 1, 2, 8, 8, 6, 4, 1, 8, 9, 4, 9, 7, 7]]
    user_B = [[4, 4, 0, 3, 3, 7, 3, 9, 1, 1, 7, 7, 9, 6, 5, 4, 8, 1, 5, 8],
              [2, 3, 8, 7, 3, 4, 6, 7, 7, 3, 3, 6, 6, 6, 8, 9, 1, 6, 3, 5],
              [5, 1, 2, 8, 9, 7, 9, 7, 5, 1, 1, 0, 9, 9, 9, 8, 6, 4, 2, 8],
              [9, 1, 9, 7, 0, 8, 5, 5, 6, 1, 0, 4, 1, 0, 3, 0, 8, 3, 9, 5],
              [2, 6, 2, 8, 6, 0, 0, 4, 6, 8, 8, 3, 7, 7, 0, 0, 5, 4, 2, 3],
              [0, 0, 2, 4, 9, 7, 1, 5, 7, 3, 8, 1, 8, 1, 6, 3, 7, 3, 8, 7],
              [4, 7, 0, 8, 0, 8, 9, 4, 2, 8, 1, 2, 9, 8, 9, 5, 8, 0, 5, 7],
              [9, 2, 5, 9, 4, 0, 6, 4, 2, 8, 4, 8, 7, 6, 9, 4, 0, 6, 8, 2],
              [2, 7, 2, 0, 6, 2, 6, 4, 7, 4, 9, 7, 6, 8, 3, 8, 0, 6, 0, 7],
              [9, 7, 0, 3, 0, 4, 2, 3, 1, 2, 3, 3, 5, 1, 2, 0, 5, 0, 2, 0]]
    plus_A = []
    for i in range(10):
        line = []
        for j in range(20):
            line.append(user_A[i][j] + test_matrix[i][j])
        plus_A.append(line)

    res_AB = get_mul(user_A, user_B, clo=10, row=20)
    res_plus_AB = get_mul(user_B, plus_A, clo=10, row=20)
    res_AA = get_mul(user_A, user_A, clo=10, row=20)
    res_AA_sqrt = get_sqrt(res_AA, N=10)
    res_BB = get_mul(user_B, user_B, clo=10, row=20)
    res_BB_sqrt = get_sqrt(res_BB, N=10)
    print("result==========")
    res_AA_plus_BB = get_result(res_AA_sqrt, res_BB_sqrt, clo=10)
    res_AA_res = get_plus(res_AA, clo=10)


    result = []

    pass


# creat(10, 20)
have_a_test()
