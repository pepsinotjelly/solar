# -*- coding: UTF-8 -*-
"""
@Project ：certificate_authority
@File    ：test_cryption.py
@Author  ：Sonia.Suen
@Date    ：2022/2/22 1:46 PM 
"""
import numpy as np
from phe import paillier
import ctypes

public_key, private_key = paillier.generate_paillier_keypair()  # 获取公钥私钥
keyring = paillier.PaillierPrivateKeyring()  # 获取一个钥匙圈
keyring.add(private_key)  # 加入钥匙圈中

public_key1, private_key1 = paillier.generate_paillier_keypair(keyring)
# print(public_key1.nsquare)
# print("=========================")
# print(private_key1)
# print("=======================")

public_key2, private_key2 = paillier.generate_paillier_keypair(keyring)

secret_number_list = [3.141592653, 1300, -4.6e-12, 1111]  # 待加密的数据

encrypted_number_list = [public_key.encrypt(x) for x in secret_number_list]  # 逐个加密
a, b, c, d = encrypted_number_list
sa = a.ciphertext()
print(" :: sa======================" + str(sa))
print(encrypted_number_list, "encrypted_number_list")  # 加密结果
# print(a + 1)
# for y in encrypted_number_list:
#     print(y._EncryptedNumber__is_obfuscated, "     y")  # 是否被混淆
#     print(y._EncryptedNumber__ciphertext)  # 密文内容
# decription
# print([private_key.decrypt(x) for x in encrypted_number_list])
print(private_key.decrypt(
    237787886570472666784373183876870220060250698333280886062145933585745178207724805570666863583706546825094527533352724761417616292879556075286226675241970808093895826157558917276063740275134718206604592830695483316551173188612417428003914588840027969501228721450042586488698812620972993740301194014571925631112519623047813537102457265484822344918209834196564256674800237387910707543331921823589913276544793234384041063957684179136123339118828795115237072564968809576075226143371452060109959914906608646187108483876544677093990952703535742053245426202976081159437856085381158818382237664318569550924585516364807653806298644585076822848738008763759033315346452368287875705621126034681849713907797384629445892386195846469514890429576405237772305612449906940437431847063707425136147971750121515940929776658012854179960584939012341328482357302116056634683563358879508563404172265222904469407097767314464808545795632321654609088325092937327189347789045391613030335916578557503369097019147234590442397755750649311366918439636858486728173465629108587232724311844786912561060089281673363120771559867616306210256719514271317762262336582134524686226874505291367621789755131827930480262033471670422156470878168729311867082727282237288306267778961))
# print([keyring.decrypt(x) for x in encrypted_number_list])
# print(private_key.decrypt(d + 1))  # 运算后解密
enc_mean = np.mean(a)
# print(enc_mean)
# print(private_key.decrypt(enc_mean))

player_1 = [[0, 1],
            [2, 3],
            [0, 5],
            [0, 7]]
player_2 = [[0, 1, 2, 3], [2, 2, 3, 4]]
# print(np.dot(player_1, player_2))
